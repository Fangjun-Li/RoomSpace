import os
from datetime import datetime
from ai2thor.controller import Controller
from ai2thor.platform import CloudRendering
from procthor.constants import PROCTHOR_INITIALIZATION
from procthor.generation import HouseGenerator, PROCTHOR10K_ROOM_SPEC_SAMPLER, ROOM_SPEC_SAMPLER


def initialize_house_generators(pid, controller, split):
    """Initialize and return a house generator."""
    global house_generators
    if pid not in house_generators:
        house_generators[pid] = HouseGenerator(
            controller=controller,
            split=split,
            room_spec_sampler=ROOM_SPEC_SAMPLER,
        )
    return house_generators[pid]

def generate_house(pid):
    """Generate a house and save it as JSON."""
    house_generator = initialize_house_generators(pid, controller, split)

    # Generate a valid house
    room_spec = None
    while True:
        house_generator.room_spec = room_spec
        house, _ = house_generator.sample()
        house.validate(house_generator.controller)
        if not house.data["metadata"]["warnings"]:
            break
        # Keep the room spec the same to avoid sampling bias.
        house_generator.room_spec = house.room_spec

    save_path = f"RoomSpace/Meta/SD-100" 
    os.makedirs(save_path, exist_ok=True)  # Ensure the output folder exists
    house.to_json(f"{save_path}/{pid}.json")
    print(f"House generated by process {pid}")


if __name__ == "__main__":
    print("Starting at", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

    split = "test"
    house_generators = {}
    controller = Controller(platform=CloudRendering, quality="High", **PROCTHOR_INITIALIZATION)

    try:
        # Generate houses
        for i in range(0, 100):
            generate_house(pid=i)
    finally:
        # Ensure the controller is properly stopped to free up CPU resources
        controller.stop()
        print("Controller stopped. Finished at", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))


